{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","col","row","Math","floor","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff066228.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n  // 関数コンポーネント\n  function Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick}>\n        {props.value}\n      </button>\n    );\n  }\n\n  // クラスコンポーネント\n  // class Square extends React.Component {\n  //   render() {\n  //     return (\n  //       <button\n  //         className=\"square\"\n  //         onClick={() => this.props.onClick()}\n  //       >\n  //         {this.props.value}\n  //       </button>\n  //     );\n  //   }\n  // }\n  \n  class Board extends React.Component {\n    renderSquare(i) {\n      return (\n        <Square \n          value={this.props.squares[i]}\n          onClick={() => this.props.onClick(i)}\n        />\n      );\n    }\n  \n    render() {\n      return (\n        <div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class Game extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        history: [{\n          squares: Array(9).fill(null)\n        }],\n        stepNumber: 0,\n        xIsNext: true,\n      }\n    }\n\n    handleClick(i) {\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      }\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\n      this.setState({\n        history: history.concat([{\n          squares: squares,\n          col: (i % 3) + 1,\n          row: Math.floor(i / 3) + 1,\n        }]),\n        stepNumber: history.length,\n        xIsNext: !this.state.xIsNext,\n      })\n    }\n\n    jumpTo(step) {\n      this.setState({\n        stepNumber: step,\n        xIsNext: (step % 2) === 0\n      })\n    }\n\n    render() {\n      const history = this.state.history;\n      const current = history[this.state.stepNumber];\n      const winner = calculateWinner(current.squares);\n\n      const moves = history.map((step, move) => {\n        const desc = move ? `Go to move # ${move} (${step.col}, ${step.row})` : 'Go to game start';\n        return (\n          <li key={move}>\n            <button\n              className={this.state.stepNumber === move ? 'selected-step' : ''}\n              onClick={() => this.jumpTo(move)}>{desc}</button>\n          </li>\n        );\n      });\n\n      let status;\n      if (winner) {\n        status = 'Winner: ' + winner;\n      } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      }\n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={current.squares}\n              onClick={(i) => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{ status }</div>\n            <ol>{ moves }</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  \n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n"],"sourceRoot":""}